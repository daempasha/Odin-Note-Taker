{"version":3,"sources":["components/Header.js","components/Note.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Background","styled","div","Title","h1","Header","props","title","href","target","className","icon","faGithubSquare","size","Note","onDelete","item","delete","txt","Paper","Grid","container","justify","IconButton","onClick","this","color","aria-label","React","Component","Notes","notes","map","input","App","state","deleteItem","bind","handleSubmit","handleChange","submit","includes","console","log","setState","filter","li","e","preventDefault","value","prevState","noValidate","onSubmit","OutlinedInput","onChange","style","Button","variant","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swBAMA,IAAMA,EAAaC,IAAOC,IAAV,KAMVC,EAAQF,IAAOG,GAAV,KAOI,SAASC,EAAOC,GAC3B,OACI,kBAACN,EAAD,KACI,kBAACG,EAAD,KAAQG,EAAMC,OACd,uBAAGC,KAAK,+BAA+BC,OAAO,OAAOC,UAAU,eAAc,kBAAC,IAAD,CAAkBC,KAAMC,IAAgBC,KAAK,S,2ECAvHC,E,YAjBX,WAAYR,GAAO,IAAD,8BACd,4CAAMA,KAGVS,SAAW,SAACC,GACR,EAAKV,MAAMW,OAAO,EAAKX,MAAMY,MALf,E,sEASd,OACI,kBAACC,EAAA,EAAD,CAAOT,UAAU,eACb,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,YAAW,kBAACF,EAAA,EAAD,CAAMJ,MAAI,GAAC,kBAACO,EAAA,EAAD,CAAYC,QAASC,KAAKV,SAAUF,KAAK,QAAQa,MAAM,UAAUC,aAAW,SAAQ,kBAAC,IAAD,SAClI,2BAAIF,KAAKnB,MAAMY,U,GAbZU,IAAMC,WCQVC,MATf,SAAexB,GACX,OACE,6BACGA,EAAMyB,MAAMC,IACT,SAAAhB,GAAI,OAAI,kBAAC,EAAD,CAAMC,OAAQX,EAAMW,OAAQC,IAAKF,Q,yJCDlCf,IAAOC,IAAV,KAAhB,IAMM+B,EAAQ,CACZ,OAAU,UACV,OAAU,QAsDGC,E,YAlDb,WAAY5B,GAAO,IAAD,8BAChB,4CAAMA,KAED6B,MAAQ,CACX,MAAQ,GACR,OAAS,IAGX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAVJ,E,wEAaPrB,GACJS,KAAKU,MAAMK,OAAOC,SAASzB,KAC5B0B,QAAQC,IAAI,QACZlB,KAAKmB,SAAS,CAACJ,OAAQf,KAAKU,MAAMK,OAAOK,OAAO,SAAAC,GAAE,OAAIA,IAAO9B,S,mCAItD+B,GAAG,IAAD,OACbA,EAAEC,iBACqB,IAApBvB,KAAKU,MAAMc,OACZxB,KAAKmB,SAAS,SAAAM,GAAS,MAAK,CAC1B,OAAS,GAAT,mBAAaA,EAAUV,QAAvB,CAA+B,EAAKL,MAAMc,QAAQ,MAAQ,Q,mCAKnDF,GACXtB,KAAKmB,SAAS,CAACK,MAAOF,EAAEtC,OAAOwC,U,+BAI/B,OACE,6BACE,2BAAG,kBAAC,EAAD,CAAQ1C,MAAO,UAChB,kBAACY,EAAA,EAAD,CAAOT,UAAU,gBACf,0BAAMyC,YAAU,EAACC,SAAU3B,KAAKa,cAC9B,kBAACe,EAAA,EAAD,CAAeJ,MAAOxB,KAAKU,MAAMc,MAAOK,SAAU7B,KAAKc,aAAcgB,MAAOtB,IAC5E,kBAACuB,EAAA,EAAD,CAAQC,QAAQ,WAAWC,KAAK,UAAhC,gBAGJ,kBAAC,EAAD,CAAOzC,OAAQQ,KAAKW,WAAYL,MAAON,KAAKU,MAAMK,c,GA5C1CZ,IAAMC,WCNJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f423af52.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport './Header.css'\r\nimport { faGithubSquare } from \"@fortawesome/free-brands-svg-icons\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Background = styled.div`\r\n    display: flex;\r\n    padding: 2vh 10vw;\r\n\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    @import url('https://fonts.googleapis.com/css?family=Skranji&display=swap');\r\n    font-family: 'Skranji', cursive;\r\n    color: #DEBE22;\r\n    letter-spacing: 5px;\r\n`;\r\n\r\nexport default function Header(props){\r\n    return(\r\n        <Background>\r\n            <Title>{props.title}</Title>\r\n            <a href='https://github.com/daempasha' target='_new' className=\"github-icon\"><FontAwesomeIcon  icon={faGithubSquare} size='2x' /></a>\r\n        </Background>\r\n        \r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './Note.css';\r\nimport {IconButton, Paper, Grid} from '@material-ui/core/';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nclass Note extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    onDelete = (item) => {\r\n        this.props.delete(this.props.txt);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Paper className='note-margin'>\r\n                <Grid container justify='flex-end'><Grid item><IconButton onClick={this.onDelete} size='small' color=\"inherit\" aria-label=\"close\"><CloseIcon /></IconButton></Grid></Grid>\r\n                <p>{this.props.txt}</p>\r\n            </Paper>);\r\n    }\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\nimport './Notes.css';\r\nimport Note from './Note'\r\n\r\nfunction Notes(props){\r\n    return (\r\n      <div>\r\n        {props.notes.map(\r\n            item => <Note delete={props.delete} txt={item}/>)}\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Notes;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport './App.css';\r\nimport Header from './components/Header.js'\r\nimport {Button, Paper, OutlinedInput} from '@material-ui/core/';\r\nimport Notes from './components/Notes'\r\n\r\nconst Background = styled.div`\r\n    display: grid;\r\n    margin: 0 10vw;\r\n    grid-template-columns: 400px 200px;\r\n`;\r\n\r\nconst input = {\r\n  'margin': '5px 5px',\r\n  'height': '36px'\r\n}\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      'value':'',\r\n      'submit':[]\r\n    }\r\n\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  deleteItem(item){\r\n      if(this.state.submit.includes(item)){\r\n        console.log('okay');\r\n        this.setState({submit: this.state.submit.filter(li => li !== item)});\r\n      }\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n    if(this.state.value != ''){\r\n      this.setState(prevState => ({\r\n        'submit':[...prevState.submit, this.state.value], 'value':''\r\n      }));\r\n    }\r\n  }\r\n\r\n  handleChange(e){\r\n    this.setState({value: e.target.value});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <a><Header title={'ODIN'} /></a>\r\n          <Paper className='paper-margin'>\r\n            <form noValidate onSubmit={this.handleSubmit}>\r\n              <OutlinedInput value={this.state.value} onChange={this.handleChange} style={input}/>\r\n              <Button variant='outlined' type='submit'>+ Add note</Button>\r\n            </form>\r\n          </Paper>\r\n          <Notes delete={this.deleteItem} notes={this.state.submit}/>\r\n        </div>\r\n    ); \r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}